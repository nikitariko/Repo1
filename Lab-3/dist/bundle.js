/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => {
  // webpackBootstrap
  /******/ 'use strict';
  /******/ var __webpack_modules__ = {
    /***/ './lab-app/src/app.ts':
      /*!****************************!*\
  !*** ./lab-app/src/app.ts ***!
  \****************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        eval(
          "\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst models_1 = __webpack_require__(/*! ./models */ \"./lab-app/src/models.ts\");\nconst services_1 = __webpack_require__(/*! ./services */ \"./lab-app/src/services.ts\");\nconst validation_1 = __webpack_require__(/*! ./validation */ \"./lab-app/src/validation.ts\");\nvar LibraryApp;\n(function (LibraryApp) {\n    class App {\n        constructor() {\n            this.libraryService = new services_1.LibraryService();\n            this.setupEventListeners();\n            this.displayBooks();\n            this.displayUsers();\n        }\n        setupEventListeners() {\n            // Додавання книги\n            const bookForm = document.getElementById('bookForm');\n            bookForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.addBook();\n            });\n            // Додавання користувача\n            const userForm = document.getElementById('userForm');\n            userForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.addUser();\n            });\n            // Пошук книг\n            const searchForm = document.getElementById('searchForm');\n            searchForm.addEventListener('submit', (e) => {\n                e.preventDefault();\n                this.searchBooks();\n            });\n        }\n        addBook() {\n            const bookTitle = document.getElementById('bookTitle').value;\n            const bookAuthor = document.getElementById('bookAuthor').value;\n            const bookYear = document.getElementById('bookYear').value;\n            if (!validation_1.Validation.isNotEmpty(bookTitle) || !validation_1.Validation.isNotEmpty(bookAuthor) || !validation_1.Validation.isValidYear(bookYear)) {\n                this.showNotification('Введіть коректні дані для книги!', 'danger');\n                return;\n            }\n            const newBook = new models_1.Book(bookTitle, bookAuthor, parseInt(bookYear));\n            this.libraryService.addBook(newBook);\n            this.displayBooks();\n            this.showNotification(`Книга \"${newBook.title}\" успішно додана.`, 'success');\n        }\n        addUser() {\n            const userName = document.getElementById('userName').value;\n            const userEmail = document.getElementById('userEmail').value;\n            if (!validation_1.Validation.isNotEmpty(userName) || !validation_1.Validation.isValidEmail(userEmail)) {\n                this.showNotification('Введіть коректні дані для користувача!', 'danger');\n                return;\n            }\n            // Генеруємо унікальний ID для нового користувача\n            const newUserId = this.libraryService.getUsers().length + 1;\n            const newUser = new models_1.User(newUserId, userName, userEmail);\n            this.libraryService.addUser(newUser);\n            this.displayUsers();\n            this.showNotification(`Користувач ${newUser.name} успішно доданий.`, 'success');\n        }\n        displayBooks(books = this.libraryService.getBooks()) {\n            const bookList = document.getElementById('bookList');\n            bookList.innerHTML = '';\n            books.forEach((book, index) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\r\n          <td>${book.title}</td>\r\n          <td>${book.author}</td>\r\n          <td>${book.year}</td>\r\n          <td>\r\n            <button class=\"btn btn-primary\" onclick=\"app.borrowBookPrompt(${index})\">Позичити</button>\r\n            <button class=\"btn btn-danger\" onclick=\"app.returnBookPrompt(${index})\">Повернути</button>\r\n            <button class=\"btn btn-warning\" onclick=\"app.deleteBook(${index})\">Видалити</button>\r\n          </td>\r\n        `;\n                bookList.appendChild(row);\n            });\n        }\n        displayUsers() {\n            const userList = document.getElementById('userList');\n            userList.innerHTML = '';\n            const users = this.libraryService.getUsers();\n            users.forEach((user) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\r\n          <td>${user.id}</td>\r\n          <td>${user.name}</td>\r\n          <td>${user.email}</td>\r\n          <td>\r\n            <button class=\"btn btn-danger\" onclick=\"app.deleteUser(${user.id})\">Видалити</button>\r\n          </td>\r\n        `;\n                userList.appendChild(row);\n            });\n        }\n        searchBooks() {\n            const query = document.getElementById('searchQuery').value.toLowerCase();\n            const books = this.libraryService.getBooks();\n            const results = books.filter(book => book.title.toLowerCase().includes(query) || book.author.toLowerCase().includes(query));\n            const searchResults = document.getElementById('searchResults');\n            searchResults.innerHTML = '<h5>Результати Пошуку:</h5>';\n            this.displayBooks(results);\n        }\n        showNotification(message, type) {\n            const notificationArea = document.getElementById('notificationArea');\n            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';\n            // Створити елемент сповіщення\n            const alertDiv = document.createElement('div');\n            alertDiv.className = `alert ${alertClass} alert-dismissible fade show`;\n            alertDiv.role = 'alert';\n            alertDiv.innerHTML = `\r\n        ${message}\r\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n      `;\n            // Додати сповіщення до області сповіщень\n            notificationArea.appendChild(alertDiv);\n            // Видалити сповіщення через 5 секунд\n            setTimeout(() => {\n                alertDiv.classList.remove('show');\n                setTimeout(() => alertDiv.remove(), 150);\n            }, 5000);\n        }\n        borrowBookPrompt(index) {\n            const userId = parseInt(prompt('Введіть ID користувача') || '', 10);\n            if (!isNaN(userId)) {\n                const book = this.libraryService.getBooks()[index];\n                const user = this.libraryService.getUserById(userId);\n                if (user && book) {\n                    if (user.canBorrowMoreBooks()) {\n                        this.libraryService.borrowBook(index, userId);\n                        this.showNotification(`Книга \"${book.title}\" успішно позичена користувачу ${user.name}.`, 'success');\n                    }\n                    else {\n                        this.showNotification(`Користувач ${user.name} не може позичити більше 3-х книг.`, 'danger');\n                    }\n                }\n                else {\n                    this.showNotification('Помилка: Книга або користувач не знайдені.', 'danger');\n                }\n            }\n            else {\n                this.showNotification('Невірний ID користувача', 'danger');\n            }\n        }\n        returnBookPrompt(index) {\n            const userId = parseInt(prompt('Введіть ID користувача') || '', 10);\n            if (!isNaN(userId)) {\n                this.libraryService.returnBook(index, userId);\n                this.showNotification(`Книга успішно повернута користувачем з ID ${userId}.`, 'success');\n            }\n            else {\n                this.showNotification('Невірний ID користувача', 'danger');\n            }\n        }\n        deleteBook(index) {\n            const book = this.libraryService.getBooks()[index];\n            this.libraryService.removeBook(index);\n            this.displayBooks();\n            this.showNotification(`Книга \"${book.title}\" успішно видалена.`, 'success');\n        }\n        deleteUser(userId) {\n            const user = this.libraryService.getUserById(userId);\n            if (user) {\n                this.libraryService.removeUser(userId);\n                this.displayUsers();\n                this.showNotification(`Користувач ${user.name} успішно видалений.`, 'success');\n            }\n            else {\n                this.showNotification('Помилка: Користувач не знайдений.', 'danger');\n            }\n        }\n    }\n    LibraryApp.App = App;\n})(LibraryApp || (LibraryApp = {}));\n// Ініціалізація додатка\nconst app = new LibraryApp.App();\nwindow.app = app;\n\n\n//# sourceURL=webpack://lab-3/./lab-app/src/app.ts?"
        );

        /***/
      },

    /***/ './lab-app/src/models.ts':
      /*!*******************************!*\
  !*** ./lab-app/src/models.ts ***!
  \*******************************/
      /***/ (__unused_webpack_module, exports) => {
        eval(
          '\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.User = exports.Book = void 0;\n// Клас для книги\nclass Book {\n    constructor(title, author, year) {\n        this.title = title;\n        this.author = author;\n        this.year = year;\n        this.isBorrowed = false; // За замовчуванням книга не позичена\n    }\n    // Метод для позичання книги\n    borrow() {\n        if (!this.isBorrowed) {\n            this.isBorrowed = true;\n            console.log(`${this.title} позичено.`);\n        }\n        else {\n            console.log(`${this.title} вже позичено.`);\n        }\n    }\n    // Метод для повернення книги\n    returnBook() {\n        if (this.isBorrowed) {\n            this.isBorrowed = false;\n            console.log(`${this.title} повернуто.`);\n        }\n        else {\n            console.log(`${this.title} не була позичена.`);\n        }\n    }\n}\nexports.Book = Book;\nconst MAX_BORROW_LIMIT = 3;\n// Оновлений клас для користувача\nclass User {\n    constructor(id, name, email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.borrowedBooks = [];\n    }\n    // Метод для перевірки, чи можна позичити ще одну книгу\n    canBorrowMoreBooks() {\n        return this.borrowedBooks.length < MAX_BORROW_LIMIT;\n    }\n    // Метод для додавання книги до списку позичених\n    borrowBook(book) {\n        if (this.canBorrowMoreBooks()) {\n            this.borrowedBooks.push(book);\n            console.log(`${book.title} позичено користувачем ${this.name}`);\n        }\n        else {\n            console.log(`Користувач ${this.name} не може позичити більше ${MAX_BORROW_LIMIT} книг.`);\n        }\n    }\n    // Метод для повернення книги\n    returnBook(book) {\n        const index = this.borrowedBooks.indexOf(book);\n        if (index > -1) {\n            this.borrowedBooks.splice(index, 1);\n            console.log(`${book.title} повернуто користувачем ${this.name}`);\n        }\n    }\n    // Метод для отримання інформації про користувача\n    getUserInfo() {\n        return `ID: ${this.id}, Name: ${this.name}, Email: ${this.email}`;\n    }\n}\nexports.User = User;\n\n\n//# sourceURL=webpack://lab-3/./lab-app/src/models.ts?'
        );

        /***/
      },

    /***/ './lab-app/src/services.ts':
      /*!*********************************!*\
  !*** ./lab-app/src/services.ts ***!
  \*********************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        eval(
          "\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LibraryService = void 0;\nconst models_1 = __webpack_require__(/*! ./models */ \"./lab-app/src/models.ts\");\nconst MAX_BORROW_LIMIT = 3;\nclass LibraryService {\n    constructor() {\n        this.books = [];\n        this.users = [];\n        this.userIdCounter = 1;\n        // Завантаження книги та користувачів із LocalStorage під час ініціалізації\n        this.loadBooksFromLocalStorage();\n        this.loadUsersFromLocalStorage();\n    }\n    // Додавання книги\n    addBook(book) {\n        this.books.push(book);\n        this.saveBooksToLocalStorage(); // Зберігаємо книги \n    }\n    // Додавання користувача\n    addUser(user) {\n        this.users.push(user);\n        this.saveUsersToLocalStorage(); // Зберігаємо користувачів \n    }\n    // Видалення книги\n    removeBook(index) {\n        this.books.splice(index, 1);\n        this.saveBooksToLocalStorage(); // Оновлюємо LocalStorage після видалення книги\n    }\n    // Отримання користувача за його ID\n    getUserById(userId) {\n        return this.users.find(user => user.id === userId);\n    }\n    // Отримання всіх книг\n    getBooks() {\n        return this.books;\n    }\n    // Отримання всіх користувачів\n    getUsers() {\n        return this.users;\n    }\n    // Позичання книги\n    borrowBook(bookIndex, userId) {\n        const book = this.books[bookIndex];\n        const user = this.getUserById(userId);\n        if (!user) {\n            this.showNotification('Користувача не знайдено.');\n            return;\n        }\n        if (book.isBorrowed) {\n            this.showNotification('Ця книга вже позичена.');\n            return;\n        }\n        if (!user.canBorrowMoreBooks()) {\n            this.showNotification(`Користувач ${user.name} не може позичити більше ${MAX_BORROW_LIMIT} книг.`);\n            return;\n        }\n        user.borrowBook(book);\n        book.borrow();\n        this.saveBooksToLocalStorage(); // Оновлюємо, після позичання книги\n        this.saveUsersToLocalStorage();\n        this.showNotification(`Книга \"${book.title}\" успішно позичена користувачем ${user.name}`);\n    }\n    // Повернення книги\n    returnBook(bookIndex, userId) {\n        const book = this.books[bookIndex];\n        const user = this.getUserById(userId);\n        if (!user) {\n            this.showNotification('Користувача не знайдено.');\n            return;\n        }\n        if (!book.isBorrowed) {\n            this.showNotification('Ця книга ще не позичена.');\n            return;\n        }\n        user.returnBook(book);\n        book.returnBook();\n        this.saveBooksToLocalStorage(); // Оновлюємо LocalStorage після повернення книги\n        this.saveUsersToLocalStorage();\n        this.showNotification(`Книга \"${book.title}\" успішно повернута користувачем ${user.name}`);\n    }\n    // Метод для відображення сповіщень\n    showNotification(message) {\n        const notification = document.createElement('div');\n        notification.className = 'alert alert-info';\n        notification.innerText = message;\n        document.body.appendChild(notification);\n        // Автоматичне приховування сповіщення через 3 секунди\n        setTimeout(() => {\n            document.body.removeChild(notification);\n        }, 3000);\n    }\n    // Збереження книг \n    saveBooksToLocalStorage() {\n        localStorage.setItem('books', JSON.stringify(this.books));\n    }\n    // Завантаження книг \n    loadBooksFromLocalStorage() {\n        const storedBooks = localStorage.getItem('books');\n        if (storedBooks) {\n            this.books = JSON.parse(storedBooks).map((bookData) => new models_1.Book(bookData.title, bookData.author, bookData.year));\n        }\n    }\n    // Збереження користувачів \n    saveUsersToLocalStorage() {\n        localStorage.setItem('users', JSON.stringify(this.users));\n    }\n    // Завантаження користувачів \n    loadUsersFromLocalStorage() {\n        const storedUsers = localStorage.getItem('users');\n        if (storedUsers) {\n            this.users = JSON.parse(storedUsers).map((userData) => new models_1.User(userData.id, userData.name, userData.email));\n            this.userIdCounter = this.users.length + 1; // Оновлюємо лічильник ID\n        }\n    }\n    // Видалення користувача\n    removeUser(userId) {\n        this.users = this.users.filter(user => user.id !== userId);\n        this.saveUsersToLocalStorage(); // Оновлюємо LocalStorage після видалення користувача\n    }\n}\nexports.LibraryService = LibraryService;\n\n\n//# sourceURL=webpack://lab-3/./lab-app/src/services.ts?"
        );

        /***/
      },

    /***/ './lab-app/src/validation.ts':
      /*!***********************************!*\
  !*** ./lab-app/src/validation.ts ***!
  \***********************************/
      /***/ (__unused_webpack_module, exports) => {
        eval(
          "\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Validation = void 0;\nclass Validation {\n    // Перевірка на порожнє поле\n    static isNotEmpty(value) {\n        return value.trim().length > 0;\n    }\n    // Валідація email\n    static isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n    // Валідація року\n    static isValidYear(year) {\n        const yearRegex = /^[12][0-9]{3}$/;\n        return yearRegex.test(year);\n    }\n}\nexports.Validation = Validation;\n// Оновлена логіка для перевірки форм\ndocument.addEventListener('DOMContentLoaded', () => {\n    const bookForm = document.getElementById('bookForm');\n    const userForm = document.getElementById('userForm');\n    // Валідація форми додавання книги\n    bookForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        // Отримання значень з полів форми\n        const titleInput = document.getElementById('bookTitle');\n        const authorInput = document.getElementById('bookAuthor');\n        const yearInput = document.getElementById('bookYear');\n        // Очищення класів валідації\n        titleInput.classList.remove('is-invalid');\n        authorInput.classList.remove('is-invalid');\n        yearInput.classList.remove('is-invalid');\n        let isValid = true;\n        // Перевірка на порожні поля\n        if (!Validation.isNotEmpty(titleInput.value)) {\n            titleInput.classList.add('is-invalid');\n            isValid = false;\n        }\n        if (!Validation.isNotEmpty(authorInput.value)) {\n            authorInput.classList.add('is-invalid');\n            isValid = false;\n        }\n        if (!Validation.isValidYear(yearInput.value)) {\n            yearInput.classList.add('is-invalid');\n            isValid = false;\n        }\n        // Якщо всі поля валідні, надсилаємо форму\n        if (isValid) {\n            bookForm.submit();\n        }\n    });\n    // Валідація форми додавання користувача\n    userForm.addEventListener('submit', (event) => {\n        event.preventDefault();\n        // Отримання значень з полів форми\n        const nameInput = document.getElementById('userName');\n        const emailInput = document.getElementById('userEmail');\n        // Очищення класів валідації\n        nameInput.classList.remove('is-invalid');\n        emailInput.classList.remove('is-invalid');\n        let isValid = true;\n        // Перевірка на порожнє поле для імені\n        if (!Validation.isNotEmpty(nameInput.value)) {\n            nameInput.classList.add('is-invalid');\n            isValid = false;\n        }\n        // Перевірка на коректність email\n        if (!Validation.isValidEmail(emailInput.value)) {\n            emailInput.classList.add('is-invalid');\n            isValid = false;\n        }\n        // Якщо всі поля валідні, надсилаємо форму\n        if (isValid) {\n            userForm.submit();\n        }\n    });\n});\n\n\n//# sourceURL=webpack://lab-3/./lab-app/src/validation.ts?"
        );

        /***/
      }

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/ exports: {}
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ __webpack_modules__[moduleId](
      module,
      module.exports,
      __webpack_require__
    );
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /************************************************************************/
  /******/
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ // This entry module can't be inlined because the eval devtool is used.
  /******/ var __webpack_exports__ = __webpack_require__(
    './lab-app/src/app.ts'
  );
  /******/
  /******/
})();
